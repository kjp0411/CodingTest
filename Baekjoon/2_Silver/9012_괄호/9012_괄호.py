# https://www.acmicpc.net/problem/9012

# 문제 분석
# VPS가 되기 위한 조건은 다음과 같습니다:
# 1. 열린 괄호 (는 반드시 닫힌 괄호 )와 짝을 이루어야 합니다.
# 2. 괄호의 개수가 맞더라도, 괄호가 닫히는 순서도 중요합니다.
# 3. (()와 같은 문자열은 괄호가 닫히지 않아서 VPS가 아닙니다.
#
# 해결 방법
# 이 문제는 스택 자료구조를 사용하여 쉽게 해결할 수 있습니다:
# 1. 열린 괄호 (가 나오면 스택에 넣습니다.
# 2. 닫힌 괄호 )가 나오면 스택에서 하나를 꺼냅니다.
# 3. 이때 스택이 비어 있으면 짝을 맞출 여는 괄호가 없다는 뜻이므로 VPS가 아닙니다.
# 4. 문자열 끝까지 모든 괄호를 처리하고 나서 스택에 여는 괄호 (가 남아 있으면 짝을 맞추지 못한 괄호가 있다는 뜻이므로 VPS가 아닙니다.
#
# 알고리즘
# 1. 주어진 괄호 문자열에 대해 차례대로 처리합니다.
# 2. 열린 괄호 (는 스택에 넣고, 닫힌 괄호 )는 스택에서 꺼냅니다.
# 3. 만약 스택에서 꺼낼 수 없거나, 문자열 끝나고 스택에 값이 남아 있으면 "NO"를 출력합니다. 그렇지 않으면 "YES"를 출력합니다.

def check_balance(s):
    stack = []      # 괄호의 균형을 확인하기 위해 사용할 리스트(스택).
    valid = True    # 입력 문자열이 올바른 괄호 문자열(VPS)인지 여부를 저장하는 변수.

    for p in s:
        if p == "(":
            stack.append(p)
        elif p == ")":
            if not stack:       # 만약 stack이 비어 있다면
                valid = False   # 올바른 괄호 쌍이 형성되지 않았다는 뜻
                break           # break로 루프 종료
            stack.pop()

    if stack:           # 문자열을 모두 순회한 후에도 stack이 비어 있지 않다면,
        valid = False   # 아직 닫히지 않은 (가 남아 있다는 뜻이므로 valid = False로 설정.

    if valid:
        print("YES")
    else:
        print("NO")


T = int(input())

for _ in range(T):  # 반복문에서 변수를 사용할 필요가 없을 때는, 관례적으로 언더바 (_) 사용
    s = input()
    check_balance(s)
